// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Post {
  id        String     @id @default(cuid())
  title     String     @default("") @db.VarChar(40)
  text      String     @db.VarChar(800)
  tags      String[]
  images    String[]
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  repost    Repost?
  createdAt DateTime   @default(now())
  likes     Likes[]
  views     Int        @default(0)
  reposts   Int        @default(0)
  mill      Mill?      @relation(fields: [millId], references: [id])
  millId    String?
  parentId  String?
  parent    Post?      @relation("ParentChildren", fields: [parentId], references: [id])
  children  Post[]     @relation("ParentChildren")
  proposals Proposal[]
}

model TagsFrequencies {
  tag   String @id
  count Int
}

model Repost {
  id     String @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String @unique

  reposter   User   @relation(fields: [reposterId], references: [id])
  reposterId String
}

model User {
  id                String              @id
  username          String              @unique
  name              String
  image             String
  bio               String
  posts             Post[]
  reposts           Repost[]
  likes             Likes[]
  invitations       Invitation[]        @relation("InvitationInviters")
  inviteCode        InviteCode?         @relation("InviteCode")
  points            Point?               @relation("Point")
  followedBy        User[]              @relation("UserFollows")
  following         User[]              @relation("UserFollows")
  onboarded         Boolean             @default(false)
  mill              Mill[]
  millSubscriptions MillSubscriptions[]
}

model Likes {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
}

model MillSubscriptions {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  mill      Mill     @relation(fields: [millId], references: [id], onDelete: Cascade)
  millId    String
  createdAt DateTime @default(now())

  @@id([millId, userId])
}

model Proposal {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt
  post            Post     @relation(fields: [postId], references: [id])
  postId          String
  web3ProposalId  String   @default("")
  duration        Int      @default(3600)
  status          Int      @default(0) // 0 - pending, 1 - approved, 2 - rejected
  likeRate        Float    @default(0)
  totalInfluence  Float    @default(0)
  result          Int      @default(0) // 0 - notstarted, 1 - onGoing  2 - good, 3 - bad，4 - end
  userAddress     String   @default("")
  userStakeId     String   @default("")
  userStakeAmount Float    @default(0)
  unLockTime      String   @default("")
  option1         String   @default("")
  option2         String   @default("")
}

model VoteRecord {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  postId         String
  proposalId     String
  web3ProposalId String
  userId         String
  userAddress    String   @default("")
  optionId       String
  voteAmount     Float
}

model Mill {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  name        String
  image       String
  bio         String?
  owner       User                @relation(fields: [ownerId], references: [id])
  ownerId     String
  posts       Post[]
  topics      String[]
  cost        Float               @default(0)
  subscribers MillSubscriptions[]
}
model InviteCode {
  userId String @id
  code   String @unique
  user   User   @relation("InviteCode", fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id                  String   @id @default(cuid())
  inviterId           String //邀请人
  inviteeId           String //被邀请人
  status              String //邀请状态InProgress、Completed
  createdAt           DateTime @default(now())
  inviterReward       Int //邀请人奖励积分数
  inviteeReward       Int //被邀请人奖励积分数
  inviterRewardIssued Boolean //邀请人奖励发方状态
  inviteeRewardIssued Boolean //被邀请人奖励发方状态
  inviter             User     @relation("InvitationInviters", fields: [inviterId], references: [id], onDelete: Cascade)

  @@index([inviterId, status])
}

model Point {
  userId String @id
  points Int
  user   User   @relation("Point", fields: [userId], references: [id], onDelete: Cascade)
}

model AppConfig {
  id Int @id @default(autoincrement())
  inviterAwardPoint Int //邀请人奖励积分数
  inviteeAwardPoint Int //被邀请人奖励积分数
  pointConvertFlrDefault   Float //积分兑换flR默认, 当计算结果是0的时候，使用此默认
  pointConvertFlrPercentage   Float //积分兑换flr百分比
}