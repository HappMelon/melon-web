// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Post {
  id        String     @id @default(cuid())
  title     String     @default("") @db.VarChar(40)
  text      String     @db.VarChar(800)
  tags      String[]
  images    String[]
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  repost    Repost?
  createdAt DateTime   @default(now())
  likes     Likes[]
  views     Int        @default(0)
  reposts   Int        @default(0)
  mill      Mill?      @relation(fields: [millId], references: [id])
  millId    String?
  parentId  String?
  parent    Post?      @relation("ParentChildren", fields: [parentId], references: [id])
  children  Post[]     @relation("ParentChildren")
  proposals Proposal[]
}

model TagsFrequencies {
  tag   String @id
  count Int
}

model Repost {
  id     String @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String @unique

  reposter   User   @relation(fields: [reposterId], references: [id])
  reposterId String
}

model User {
  id                String              @id
  username          String              @unique
  name              String
  image             String
  bio               String
  posts             Post[]
  reposts           Repost[]
  likes             Likes[]
  followedBy        User[]              @relation("UserFollows")
  following         User[]              @relation("UserFollows")
  onboarded         Boolean             @default(false)
  mill              Mill[]
  millSubscriptions MillSubscriptions[]
}

model Likes {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
}

model MillSubscriptions {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  mill      Mill     @relation(fields: [millId], references: [id], onDelete: Cascade)
  millId    String
  createdAt DateTime @default(now())

  @@id([millId, userId])
}

model Proposal {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt
  post            Post     @relation(fields: [postId], references: [id])
  postId          String
  web3ProposalId  String   @default("")
  duration        Int      @default(3600)
  status          Int      @default(0) // 0 - pending, 1 - approved, 2 - rejected
  likeRate        Float    @default(0)
  totalInfluence  Float    @default(0)
  result          Int      @default(0) // 0 - notstarted, 1 - onGoing  2 - good, 3 - bad
  userAddress     String   @default("")
  userStakeId     String   @default("")
  userStakeAmount Float    @default(0)
  unLockTime      String   @default("")
  option1         String   @default("")
  option2         String   @default("")
}

model VoteRecord {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  postId         String
  proposalId     String
  web3ProposalId String
  userId         String
  userAddress    String   @default("")
  optionId       String
  voteAmount     Float
}

model Mill {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  name        String
  image       String
  bio         String?
  owner       User                @relation(fields: [ownerId], references: [id])
  ownerId     String
  posts       Post[]
  topics      String[]
  cost        Float               @default(0)
  subscribers MillSubscriptions[]
}

model PopularTag {
  id            Int          @id @default(autoincrement())
  PopularList   PopularList? @relation(fields: [popularListId], references: [id])
  popularListId Int?
}

model PopularList {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime
  tagList     PopularTag[]
  message     String
  views       Int
  comments    Int
  collections Int
  shares      Int
  Popular     Popular?     @relation(fields: [popularId], references: [id])
  popularId   String?
}

model Popular {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  name      String
  image     String
  bio       String?
  lists     PopularList[]
  // owner       User                @relation(fields: [ownerId], references: [id])
}
